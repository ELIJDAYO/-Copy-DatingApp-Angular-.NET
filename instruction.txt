Section 2
    dotnet --info
    dotnet new list
    dotnet new sln
        dotnet sln -h
        dotnet sln list
    dotnet new webapi -n API
    dotnet sln add API

    install CS extension
    
    cd API dotnet run (controller listening to an end point)

    dotnet run -lp https
    (need ssl cert?)

    after editing some settings.json
    dotnet run

    after removing ItemGroup from api.csproj
    dotnet restore

    installed nuget gallery extension
    crtl+p, >microsoft.entityFrameWork, install sqlite and desig to API.csproj

    cd API, dotnet tool list -g
    dotnet tool install --global dotnet-ef --version 7.0.3
    

    dotnet ef, dotnet ef migrations add InitialCreate -o Data/Migrations
    if you see err do "dotnet build"

    cd API, dotnet ef database -h, dotnet ef database update

    install sqlite extension, >sqlite: open db, then insert queries

    using c# extension, make naming convention easier by _
    after completing the source code of controller, dotnet watch run, http://localhost:5001/api/users, or use postman to verify api res and req

    it tells which sdk is being used for this project, do this command when creating a project
    dotnet new globaljson


    section 3: angular used for client-side web application
    npm install -g @angular/cli@14

    ng new client, select y and css


Section 3
    cd client, ng serve (to execute angular application)

    from extension download Angular Language Service

    add cors to user api will be accepted by the browser

    cd to API, and "dotnet watch run" for API req

    API returns variable name in camel case

    cd Client
    npm uninstall @schematics/angular
    ng version
    npm install ngx-bootstrap@9
    ng add ngx-bootstrap
    npm install @angular/platform-browser
    cd Client to restart the BS config

    install Chocolatey from browser to powershell, and go to mkcert github to install packages for windows
    run powershell as an admin, mkdir ssl in client folder, cd ssl, choco install mkcert, mkcert -install, mkcert localhost, so there should be pem files in DatingApp/client/ssl
    if user data is not displayed, dotnet dev-certs https --clean, dotnet dev-certs https, dotnet dev-certs https --trust

    run ng serve with ssl so modify the angular.json, then restart

    download the ssl cert from the coursefile, import to currentuser, copy server.crt and server.key to DatingApp/ssl dir

Section 4

    disable hot-reload, dotnet watch --no-hot-reload
    stop api from running to do migration, cd API,
    delete migration folder, dotnet ef database drop, dotnet ef migrations add UserPasswordAdded
    
    if postman does not work try refreshing the API

    (debugger) >.NET: Generate Assets for Build and Debug, run API and client, select .NET Core Attach and run, then put mark where to end debugging, post user from postman 